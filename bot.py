import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from messages import MESSAGES
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

LANGUAGE_KEYBOARD = [["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá¨üáß English"]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        MESSAGES["ua"]["start"],
        reply_markup=ReplyKeyboardMarkup(LANGUAGE_KEYBOARD, resize_keyboard=True)
    )

async def handle_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in text:
        context.user_data["lang"] = "ua"
    elif "English" in text:
        context.user_data["lang"] = "en"
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Please choose a language.")
        return

    lang = context.user_data["lang"]
    menu = [[m] for m in MESSAGES[lang]["menu"]]
    await update.message.reply_text(
        MESSAGES[lang]["main"],
        reply_markup=ReplyKeyboardMarkup(menu, resize_keyboard=True)
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ua")
    text = update.message.text

    responses = {
        "ua": {
            "üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Å–∞—É–Ω": "–û—Å—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Å–∞—É–Ω: [PDF / –ø–æ—Å–∏–ª–∞–Ω–Ω—è]",
            "ü™µ –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏": "–ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Ä–º–æ–æ—Å–∏–∫—É, —Ç–µ—Ä–º–æ—è—Å–µ–Ω, –º—ñ–Ω–µ—Ä–∞–ª—å–Ω—É –≤–∞—Ç—É —Ç–æ—â–æ...",
            "üõ† –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó": "–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó: –ø–∞–Ω–æ—Ä–∞–º–Ω–µ –≤—ñ–∫–Ω–æ, RGB –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è, Bluetooth...",
            "‚úçÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∞ sauna": "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º —Å–≤–æ—ó –ø–æ–±–∞–∂–∞–Ω–Ω—è ‚Äî –∑—Ä–æ–±–∏–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—Ä–æ—î–∫—Ç!",
            "üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º": "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
            "üåç –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É": await start(update, context)
        },
        "en": {
            "üì¶ Sauna catalog": "Here is our sauna catalog: [PDF / link]",
            "ü™µ Materials": "We use thermo-aspen, thermo-ash, mineral wool, etc...",
            "üõ† Extra features": "Available: panoramic window, RGB lighting, Bluetooth audio...",
            "‚úçÔ∏è Custom sauna": "Send us your ideas ‚Äî we‚Äôll design a custom sauna for you!",
            "üìû Contact a manager": "Our manager will contact you shortly.",
            "üåç Change language": await start(update, context)
        }
    }

    reply = responses[lang].get(text)
    if isinstance(reply, str):
        await update.message.reply_text(reply)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_language))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    print("Bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()