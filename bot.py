import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from messages import MESSAGES
from dotenv import load_dotenv
from itertools import zip_longest

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID"))

LANGUAGE_KEYBOARD = [["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá¨üáß English"]]

# –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
def group_menu(items, n=2):
    args = [iter(items)] * n
    return [list(filter(None, group)) for group in zip_longest(*args)]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        MESSAGES["ua"]["start"],
        reply_markup=ReplyKeyboardMarkup(LANGUAGE_KEYBOARD, resize_keyboard=True)
    )

async def notify_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = (
        f"üì¨ –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –∑–≤‚Äô—è–∑–æ–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
        f"–Ü–º º—è: {user.full_name}\n"
        f"Username: @{user.username if user.username else '–Ω–µ–º–∞—î'}\n"
        f"ID: {user.id}"
    )
    await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=message)

async def handle_contact_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify_manager(update, context)
    await update.message.reply_text("–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤ º—è–∂–µ—Ç—å—Å—è üôå")

async def send_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ua")

    caption = {
        "ua": "–û—Å—å –Ω–∞—à –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥ PDF —Ñ–∞–π–ª–æ–º üìÑ",
        "en": "Here is our latest sauna catalog as a PDF üìÑ"
    }.get(lang, "Catalog üìÑ")

    with open("catalog.pdf", "rb") as pdf_file:
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=pdf_file,
            filename="LakeGlow_Sauna_Catalog.pdf",
            caption=caption
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    lang = context.user_data.get("lang")

    # –í–∏–±—ñ—Ä –º–æ–≤–∏
    if text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞":
        context.user_data["lang"] = "ua"
        lang = "ua"
    elif text == "üá¨üáß English":
        context.user_data["lang"] = "en"
        lang = "en"

    # –Ø–∫—â–æ –º–æ–≤—É —â–µ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ
    if not lang:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Please choose a language.")
        return

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
    if text in ["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá¨üáß English"]:
        raw_menu = MESSAGES[lang]["menu"]
        menu = group_menu(raw_menu, n=2)
        await update.message.reply_text(
            MESSAGES[lang]["main"],
            reply_markup=ReplyKeyboardMarkup(menu, resize_keyboard=True)
        )
        return

    # –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –º–µ–Ω—é
    responses = {
        "ua": {
            "üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Å–∞—É–Ω": send_catalog,
            "ü™µ –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏": (
                "ü™µ *–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏, —è–∫—ñ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É –Ω–∞—à–∏—Ö —Å–∞—É–Ω–∞-–±–∞–Ω—ñ:*\n\n"
                "–ö–∞—Ä–∫–∞—Å –∑ —Å–æ—Å–Ω–∏ 50√ó100 –º–º, —É—Ç–µ–ø–ª–µ–Ω–Ω—è ‚Äî 10 —Å–º –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–æ—ó –≤–∞—Ç–∏.\n\n"
                "üîπ *–ó–æ–≤–Ω—ñ:*\n"
                "‚Äî 2 —Å—Ç—ñ–Ω–∏: –º–µ—Ç–∞–ª–µ–≤–∏–π –∫–ª—ñ–∫-—Ñ–∞–ª—å—Ü\n"
                "‚Äî 2 —Å—Ç—ñ–Ω–∏: –¥–µ—Ä–µ–≤‚Äô—è–Ω–∏–π –ø–ª–∞–Ω–∫–µ–Ω –∞–±–æ –≥–æ–Ω—Ç\n\n"
                "üîπ *–ü–∏—Ä—ñ–≥ —Å—Ç—ñ–Ω–∏ (–∑–æ–≤–Ω—ñ ‚Üí –≤—Å–µ—Ä–µ–¥–∏–Ω—É):*\n"
                "1. –ú–µ—Ç–∞–ª–µ–≤–∏–π –∫–ª—ñ–∫-—Ñ–∞–ª—å—Ü –∞–±–æ –¥–µ—Ä–µ–≤‚Äô—è–Ω–∏–π —Ñ–∞—Å–∞–¥\n"
                "2. –ú–æ–Ω—Ç–∞–∂–Ω–∞ –¥–µ—Ä–µ–≤‚Äô—è–Ω–∞ —Ä–µ–π–∫–∞\n"
                "3. –í—ñ—Ç—Ä–æ–∑–∞—Ö–∏—Å–Ω–∞ –º–µ–º–±—Ä–∞–Ω–∞\n"
                "4. –ú—ñ–Ω–µ—Ä–∞–ª—å–Ω–∞ –≤–∞—Ç–∞ 100 –º–º\n"
                "5. –§–æ–ª—å–≥–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–±–∞—Ä‚Äô—î—Ä\n"
                "6. –í–∞–≥–æ–Ω–∫–∞ –∑ –≤—ñ–ª—å—Ö–∏\n\n"
                "üîπ *–í—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–∞—Ä–Ω–æ—ó:*\n"
                "‚Äî –õ–µ–∂–∞–∫–∏ –∑ –≤—ñ–ª—å—Ö–∏\n"
                "‚Äî –ü–∞–Ω–æ—Ä–∞–º–Ω–µ –≥–∞—Ä—Ç–æ–≤–∞–Ω–µ —Å–∫–ª–æ 6 –º–º"
            ),
            "üõ† –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó": "–î–∏–≤—ñ—Ç—å—Å—è –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\nhttps://urist-github.github.io/sauna-price/",
            "‚úçÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∞ sauna": "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º —Å–≤–æ—ó –ø–æ–±–∞–∂–∞–Ω–Ω—è ‚Äî –∑—Ä–æ–±–∏–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—Ä–æ—î–∫—Ç!",
            "üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º": handle_contact_request,
            "üåç –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É": start
        },
        "en": {
            "üì¶ Sauna catalog": send_catalog,
            "ü™µ Materials": (
                "ü™µ *Materials we use in our outdoor sauna cabins:*\n\n"
                "The frame is made of pine 50√ó100 mm with 100 mm mineral wool insulation.\n\n"
                "üîπ *Exterior cladding:*\n"
                "‚Äî 2 walls: metal click-lock panels\n"
                "‚Äî 2 walls: natural wood planks or shingles\n\n"
                "üîπ *Wall structure (outside ‚Üí inside):*\n"
                "1. Metal click-lock or wooden facade\n"
                "2. Wooden battens\n"
                "3. Windproof membrane\n"
                "4. 100 mm mineral wool\n"
                "5. Foil vapor barrier\n"
                "6. Alder paneling\n\n"
                "üîπ *Inside the steam room:*\n"
                "‚Äî Alder benches\n"
                "‚Äî Tempered glass panel (6 mm)"
            ),
            "üõ† Extra features": "See all available features here:\nhttps://urist-github.github.io/sauna-price/",
            "‚úçÔ∏è Custom sauna": "Send us your ideas ‚Äî we‚Äôll design a custom sauna for you!",
            "üìû Contact a manager": handle_contact_request,
            "üåç Change language": start
        }
    }

    reply = responses[lang].get(text)

    if callable(reply):
        await reply(update, context)
    elif isinstance(reply, str):
        await update.message.reply_text(reply)
    else:
        await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é üëá")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    print("Bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()
